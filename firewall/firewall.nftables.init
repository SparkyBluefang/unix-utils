#!/sbin/runscript

depend() {
	before net
}

start() {
	ebegin "Starting firewall"

	nft -f /dev/stdin <<-EOF
		flush ruleset

		table inet filter {
			chain prerouting {
				type filter hook prerouting priority -300; policy accept;

				# Drop spoofed packets (rp_filter)
				fib saddr . iif oif missing counter drop
			}

			chain input {
				type filter hook input priority 0; policy drop;

				# Accept valid local and related/established incoming traffic
				ct state established,related accept
				iif lo accept

				# Accept important ICMP and IPSec
				icmp type echo-request ct state new accept
				icmpv6 type echo-request ct state new accept
				icmpv6 type nd-neighbor-solicit accept
				icmpv6 type nd-neighbor-advert accept
				icmpv6 type nd-router-solicit accept
				icmpv6 type nd-router-advert accept

				# Drop packets with invalid state
				ct state invalid counter drop

				# Wire in TCP and UDP chains for custom rules
				ip protocol tcp tcp flags & (fin | syn | rst | ack) == syn ct state new jump TCP
				ip protocol udp ct state new jump UDP

				# Drop all unmatched traffic
				ip protocol tcp counter reject with tcp reset
				ip protocol udp counter reject
				counter reject with icmp type prot-unreachable
			}

			chain TCP {
			}

			chain UDP {
			}

			chain forward {
				type filter hook forward priority 0; policy drop;
			}

			chain output {
				type filter hook output priority 0; policy accept;
			}
		}
	EOF

	for x in ${TCP_SERVICES}; do
		nft add rule inet filter TCP tcp dport ${x} accept
	done

	for x in ${UDP_SERVICES}; do
		nft add rule inet filter UDP udp dport ${x} accept
	done

	# explicitly disable ECN
	if [[ -e /proc/sys/net/ipv4/tcp_ecn ]]; then
		echo 0 > /proc/sys/net/ipv4/tcp_ecn
	fi

	eend
}

stop() {
	ebegin "Stopping firewall"
	nft flush ruleset
	eend
}
